= MiCluster =
Java library to cluster molecular interactions.

== Maven dependency ==
You could easily use the MiCluster through maven adding the MiScore dependency and the EBI repository:
{{{
  <dependency>
     <groupId>uk.ac.ebi.enfin.mi.cluster</groupId>
     <artifactId>micluster</artifactId>
     <version>1.6-SNAPSHOT</version>
  </dependency>
}}}
{{{
  <repository>
     <id>ebi-repo</id>
     <name>The EBI internal repository</name>
     <url>http://www.ebi.ac.uk/~maven/m2repo</url>
  </repository>
}}}
<br>

== Input examples ==
Examples of how to input and cluster data.
=== Cluster binary interactions from a PSI MITAB file: === 
{{{
...
        /* Set priority for molecule accession mapping (find more database names in the MI Ontology, MI:0473) */
        final String allMappingNames = "uniprotkb,intact,ddbj/embl/genbank,chebi,irefindex,hgnc,ensembl,refseq";
        /* File */
        final File P37173_intact = new File( PsiMitabFile.class.getResource( "/P37173_intact.tsv" ).getFile() );

        /* Cluster data */
        InteractionCluster iC = new InteractionCluster();
        iC.setBinaryInteractionIterator(P37173_intact, false);
        iC.setMappingIdDbNames(allMappingNames);
        iC.runService();
...
}}}

=== Cluster binary interactions from several PSI MITAB files: === 
{{{
...
        /* Set priority for molecule accession mapping (find more database names in the MI Ontology, MI:0473) */
        final String allMappingNames = "uniprotkb,intact,ddbj/embl/genbank,chebi,irefindex,hgnc,ensembl,refseq";
        /* File */
        final File P37173_intact = new File( PsiMitabFile.class.getResource( "/P37173_intact.tsv" ).getFile() );
        final File P37173_mint = new File( PsiMitabFile.class.getResource( "/P37173_mint.tsv" ).getFile() );
        final File P37173_innatedb = new File( PsiMitabFile.class.getResource( "/P37173_innatedb.tsv" ).getFile() );

        /* Cluster data */
        InteractionCluster iC = new InteractionCluster();
        iC.setBinaryInteractionIterator(new File[] {P37173_intact,P37173_mint,P37173_innatedb}, false);
        iC.setMappingIdDbNames(allMappingNames);
        iC.runService();
...
}}}

=== Cluster binary interactions from a PSICQUIC service: === 
{{{
...
        /* Set priority for molecule accession mapping (find more database names in the MI Ontology, MI:0473) */
        final String allMappingNames = "uniprotkb,intact,ddbj/embl/genbank,chebi,irefindex,hgnc,ensembl,refseq";
        /* MIQL Query */
        String query = "identifier:P37173";
        /* PSICQUIC service */
        String psicquicService = "IntAct";

        /* Cluster data */
        InteractionCluster iC = new InteractionCluster();
        iC.addMIQLQuery(query);
        iC.addQuerySource(psicquicService);
        iC.setMappingIdDbNames(allMappingNames);
        iC.runService();
...
}}}

=== Cluster binary interactions from several PSICQUIC services ===
{{{
...
        /* Set priority for molecule accession mapping (find more database names in the MI Ontology, MI:0473) */
        final String allMappingNames = "uniprotkb,intact,ddbj/embl/genbank,chebi,irefindex,hgnc,ensembl,refseq";
        /* MIQL Query */
        String query = "identifier:P37173";
        /* PSICQUIC service */
        List psicquicServices = new ArrayList();
        psicquicServices.add("IntAct");
        psicquicServices.add("MINT");

        /* Cluster data */
        InteractionCluster iC = new InteractionCluster();
        iC.addMIQLQuery(query);
        iC.setQuerySources(psicquicServices);
        iC.setMappingIdDbNames(allMappingNames);
        iC.runService();
...
}}}

=== Cluster binary interactions from a PSICQUIC service URL ===
{{{
...
        /* Set priority for molecule accession mapping (find more database names in the MI Ontology, MI:0473) */
        final String allMappingNames = "uniprotkb,intact,ddbj/embl/genbank,chebi,irefindex,hgnc,ensembl,refseq";
        /* PSICQUIC URL */
        String query = "identifier:P37173";
        URL intactQuery = new URL("http://www.ebi.ac.uk/Tools/webservices/psicquic/intact/webservices/current/search/query/" + query);
        PsimiTabReader mitabReader = new PsimiTabReader(false);
        List<BinaryInteraction> binaryInteractions = new ArrayList<BinaryInteraction>();
        binaryInteractions.addAll(mitabReader.read(intactQuery));

        /* Cluster data */
        InteractionCluster iC = new InteractionCluster();
        iC.setBinaryInteractionIterator(binaryInteractions.iterator());
        iC.setMappingIdDbNames(allMappingNames);
        iC.runService();
...
}}}

=== Cluster binary interactions from several PSICQUIC service URLs === 
{{{
...
        /* Set priority for molecule accession mapping (find more database names in the MI Ontology, MI:0473) */
        final String allMappingNames = "uniprotkb,intact,ddbj/embl/genbank,chebi,irefindex,hgnc,ensembl,refseq";
        /* PSICQUIC URL */
        String query = "identifier:P37173";
        URL intactQuery = new URL("http://www.ebi.ac.uk/Tools/webservices/psicquic/intact/webservices/current/search/query/" + query);
        URL mintQuery = new URL("http://mint.bio.uniroma2.it/mint/psicquic/webservices/current/search/query/" + query);
        PsimiTabReader mitabReader = new PsimiTabReader(false);
        List<BinaryInteraction> binaryInteractions = new ArrayList<BinaryInteraction>();
        binaryInteractions.addAll(mitabReader.read(intactQuery));
        binaryInteractions.addAll(mitabReader.read(mintQuery));

        /* Cluster data */
        InteractionCluster iC = new InteractionCluster();
        iC.setBinaryInteractionIterator(binaryInteractions.iterator());
        iC.setMappingIdDbNames(allMappingNames);
        iC.runService();
...
}}}

=== Cluster binary interactions from all the PSICQUIC services available in the PSICQUIC registry === 
{{{
...
        /* Set priority for molecule accession mapping (find more database names in the MI Ontology, MI:0473) */
        final String allMappingNames = "uniprotkb,intact,ddbj/embl/genbank,chebi,irefindex,hgnc,ensembl,refseq";
        /* MIQL Query */
        String query = "identifier:P37173";

        /* Cluster data */
        InteractionCluster iC = new InteractionCluster();
        iC.addMIQLQuery(query);
        iC.setQuerySourcesFromPsicquicRegistry();
        iC.setMappingIdDbNames(allMappingNames);
        iC.runService();
...
}}}
<br/>
== Output examples ==
Examples of how to use the clustered data.
=== Print example results from clustered data: === 
{{{
...
        Map<Integer, EncoreInteractionForScoring> interactionMapping = iC.getInteractionMapping();
        Map<String, List<Integer>> interactorMapping = iC.getInteractorMapping();
        Map<String, String> interactorSynonyms = iC.getSynonymMapping();

        /* PRINT SOME RESULTS */
        String fisrtSeparator = "\t";
        String secondSeparator = ",";

        /* Print interactors for clustered binary interactions including publication accessions */
        System.out.println("Print interactors for clustered binary interactions including publication accessions");
        System.out.println("interaction_location"+ fisrtSeparator + "interactor_A" + fisrtSeparator + "interactor_B" + fisrtSeparator + "publications");
        for(Integer i:interactionMapping.keySet()){
            EncoreInteractionForScoring eI = interactionMapping.get(i);

            /* Get publications */
            String publications = "";
            for(String publication:eI.getExperimentToPubmed().values()){
                publications += publication + secondSeparator;
            }
            publications = publications.substring(0,publications.length()-1);

            System.out.println(i + fisrtSeparator + eI.getInteractorA() + fisrtSeparator + eI.getInteractorB() + fisrtSeparator + publications);
        }
        System.out.println("");

        /* Print interactors and its location in the interactionMapping */
        System.out.println("Print interactors and its location in the interactionMapping");
        System.out.println("interactor"+ fisrtSeparator + "interaction_location");
        for(String interactor:interactorMapping.keySet()){
            System.out.println(interactor + fisrtSeparator + interactorMapping.get(interactor));
        }
        System.out.println("");

        /* Print interactors and publication */
        System.out.println("Print synonyms for interactors");
        System.out.println("synonym"+ fisrtSeparator + "interactor");
        for(String synonym:interactorSynonyms.keySet()){
            System.out.println(interactorSynonyms.get(synonym) + fisrtSeparator + synonym);
        }
...
}}}

=== Print example results from clustered data with miscore information: === 
{{{
...
        Map<Integer, EncoreInteractionForScoring> interactionMapping = iC.getInteractionMapping();

        /* PRINT SOME RESULTS */
        String fisrtSeparator = "\t";
        String secondSeparator = ",";

        /* Print interactors for clustered binary interactions including publication accessions */
        System.out.println("Print interactors for clustered binary interactions including publication accessions");
        System.out.println("interaction_location"+ fisrtSeparator + "interactor_A" + fisrtSeparator + "interactor_B" + fisrtSeparator +
                "score" + fisrtSeparator + "publications"+ fisrtSeparator + "types" + fisrtSeparator + "methods");
        for(Integer i:interactionMapping.keySet()){
            EncoreInteractionForScoring eI = interactionMapping.get(i);

            /* Get score */
            String score = "";
            List<Confidence> confidenceScores = eI.getConfidenceValues();
            for(Confidence confidenceScore:confidenceScores){
                if(confidenceScore.getType().equalsIgnoreCase("miscore")){
                    score = confidenceScore.getValue();
                }
            }

            /* Get publications */
            String publications = "";
            for(String publication:eI.getExperimentToPubmed().values()){
                publications += publication + secondSeparator;
            }
            publications = publications.substring(0,publications.length()-1);

            /* Get types */
            String types = "";
            for(String type:eI.getTypeToPubmed().keySet()){
                types += type + secondSeparator;
            }
            types = types.substring(0,types.length()-1);

            /* Get methods */
            String methods = "";
            for(String method:eI.getMethodToPubmed().keySet()){
                methods += method + secondSeparator;
            }
            methods = methods.substring(0,methods.length()-1);

            System.out.println(i + fisrtSeparator + eI.getInteractorA() + fisrtSeparator + eI.getInteractorB() + fisrtSeparator +
                    score + fisrtSeparator + publications + fisrtSeparator + types + fisrtSeparator + methods);
        }
        System.out.println("");
...
}}}
Output example:
{{{
interaction_location	interactor_A	interactor_B	score	publications	types	methods
1	P37173	Q81LN0	0.23642068	20711500	MI:0915	MI:0398
2	P37173	O35613	0.26973546	11483955	MI:0915	MI:0096
3	P37173	P35243	0.23642068	21988832	MI:0915	MI:0397
4	Q9HD26	P37173	0.23642068	21988832	MI:0915	MI:0397
5	P37173	Q99K41	0.26973546	16530041	MI:0914	MI:0007
6	P10600	P37173	0.81777763	15017149,21423151,11850637,18243111,21423151,21423151,21423151	MI:0407,MI:0915	MI:0107,MI:0077,MI:0114,MI:0276
7	Q9UER7	P37173	0.33150592	11483955,11483955	MI:0915	MI:0019,MI:0018
8	P16234	P37173	0.23642068	21988832	MI:0915	MI:0397
9	P37173	P07200	0.50613064	16530041,16530041	MI:0407,MI:0914	MI:0007
10	P37173	P01137	0.82401556	18382895,20860622,15034927,18382895,20856203,21054789,20856203	MI:0407,MI:0915	MI:0096,MI:0007,MI:0107,MI:0018,MI:0030
11	P37173	P29353	0.26973546	17440088	MI:0914	MI:0019
12	P37173	Q12841	0.43887317	20860622	MI:0407	MI:0107
13	P36897	P37173	0.4996667	18243111,21423151,21423151,21423151	MI:0915	MI:0071,MI:0107,MI:0276,MI:0226
14	P37173	P37173	0.6230328	9169454,9169454,12015308	MI:0217	MI:0423
15	Q92831	P37173	0.26973546	11744689	MI:0915	MI:0004
17	P18146	P37173	0.26973546	10982796	MI:0915	MI:0412
16	NR_029493	P37173	0.26973546	19816956	MI:0915	MI:0415
19	P25208	P37173	0.26973546	11744689	MI:0915	MI:0413
18	P23511	P37173	0.34777966	11744689,11744689	MI:0915	MI:0004,MI:0413
21	P78545	P37173	0.26973546	9417054	MI:0915	MI:0413
20	P37173	P09486	0.26973546	15034927	MI:0915	MI:0007
23	P37173	P37023	0.34777966	18333754,18333754	MI:0915	MI:0007,MI:0030
22	P62993	P37173	0.26973546	18174260	MI:0915	MI:0007
25	P08047	P37173	0.41277552	10982796,11741970	MI:0915	MI:0413,MI:0412
24	P05412	P37173	0.26973546	11741970	MI:0915	MI:0413
27	Q15796	P37173	0.26973546	8980228	MI:0915	MI:0007
26	P17813	P37173	0.41277552	12015308,16785228	MI:0915	MI:0007
29	P49716	P37173	0.26973546	21072181,21072181	MI:0915	MI:0007
28	Q02447	P37173	0.26973546	10982796	MI:0915	MI:0412
}}}

=== Print PSI MITAB results from clustered data: === 
{{{
...
        /* Convert EncoreInteractions into BinaryInteractions */
        List<BinaryInteraction> binaryInteractions = new ArrayList<BinaryInteraction>();
        Encore2Binary iConverter = new Encore2Binary(iC.getMappingIdDbNames());
        for(EncoreBinaryInteraction eI:iC.getInteractionMapping().values()){
            binaryInteractions.add(iConverter.getBinaryInteraction(eI));
        }
        /* Print PSI MITAB clustered binary interactions */
        PsimiTabWriter writer = new PsimiTabWriter();
        writer.write(binaryInteractions, System.out);
...
}}}


== Source code ==
You can find the source code in:
<br>
http://code.google.com/p/micluster/source/browse/#svn%2Ftrunk%2Fmicluster

== jar file ==
The jar file can also be found in this url:
<br>
http://www.ebi.ac.uk/~maven/m2repo/uk/ac/ebi/enfin/mi/cluster/micluster/1.6/